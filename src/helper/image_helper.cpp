//
// Created by jan on 18.08.16.
//

#include <boost/unordered_map.hpp>
#include "helper/image_helper.h"

namespace helper
{
    namespace image
    {
        ColorMap generateColorMapVOC(size_t n)
        {
            enum Bits
            {
                FirstBit = 1 << 0,
                SecondBit = 1 << 1,
                ThirdBit = 1 << 2,
            };
            ColorMap cmap(n);
            for (size_t i = 0; i < n; ++i)
            {
                size_t id = i;
                unsigned char r = 0, g = 0, b = 0;
                for (int j = 0; j <= 7; ++j)
                {
                    // Note: This is switched compared to the pascal voc example code because opencv has BGR instead of RGB
                    b = b | static_cast<unsigned char>(((id & FirstBit) >> 0) << (7 - j));
                    g = g | static_cast<unsigned char>(((id & SecondBit) >> 1) << (7 - j));
                    r = r | static_cast<unsigned char>(((id & ThirdBit) >> 2) << (7 - j));
                    id = id >> 3;
                }
                cmap[i][0] = r;
                cmap[i][1] = g;
                cmap[i][2] = b;
            }
            return cmap;
        }

        ColorMap generateColorMap(size_t n)
        {
            assert(n < 713);
            static constexpr std::array<unsigned char, 3> colors[] = {{255,0,0}, {89,74,45}, {0,77,31}, {38,59,77}, {54,16,64}, {242,0,0}, {64,53,32}, {51,204,112}, {26,39,51}, {207,115,230}, {191,0,0}, {51,43,26}, {41,166,91}, {191,225,255}, {161,89,179}, {166,0,0}, {242,222,182}, {35,140,77}, {163,191,217}, {242,191,255}, {127,0,0}, {179,164,134}, {121,242,170}, {134,158,179}, {214,0,230}, {102,0,0}, {128,117,96}, {96,191,134}, {105,124,140}, {155,0,166}, {242,61,61}, {102,94,77}, {64,128,89}, {57,68,77}, {119,0,128}, {191,48,48}, {229,184,0}, {38,77,54}, {38,45,51}, {83,0,89}, {140,35,35}, {191,153,0}, {26,51,36}, {0,102,255}, {48,0,51}, {102,26,26}, {127,102,0}, {163,217,184}, {0,82,204}, {242,64,255}, {76,19,19}, {76,61,0}, {134,179,152}, {0,46,115}, {206,54,217}, {64,16,16}, {51,41,0}, {48,64,54}, {0,36,89}, {48,13,51}, {51,13,13}, {255,217,64}, {0,242,129}, {0,26,64}, {247,128,255}, {255,128,128}, {204,173,51}, {0,51,27}, {0,20,51}, {136,70,140}, {191,96,96}, {166,141,41}, {64,255,166}, {64,140,255}, {176,134,179}, {153,77,77}, {115,98,29}, {41,166,108}, {54,119,217}, {230,0,214}, {127,64,64}, {89,76,22}, {22,89,58}, {38,84,153}, {179,0,167}, {102,51,51}, {255,230,128}, {108,217,166}, {32,70,128}, {153,0,143}, {64,32,32}, {191,172,96}, {51,102,78}, {115,161,230}, {64,0,60}, {51,26,26}, {140,126,70}, {105,140,124}, {83,116,166}, {204,51,194}, {255,191,191}, {102,92,51}, {67,89,79}, {70,98,140}, {128,32,121}, {191,143,143}, {255,242,191}, {0,204,136}, {45,62,89}, {102,26,97}, {115,86,86}, {217,206,163}, {0,115,77}, {32,45,64}, {77,19,73}, {51,38,38}, {140,133,105}, {0,64,43}, {191,217,255}, {179,89,173}, {140,19,0}, {77,73,57}, {57,230,172}, {163,184,217}, {115,57,111}, {76,10,0}, {51,48,38}, {45,179,134}, {134,152,179}, {89,45,86}, {64,9,0}, {229,214,0}, {35,140,105}, {86,98,115}, {64,32,62}, {255,89,64}, {178,167,0}, {128,255,212}, {48,54,64}, {51,26,49}, {204,71,51}, {140,131,0}, {108,217,181}, {0,68,255}, {128,96,125}, {166,58,41}, {102,95,0}, {89,179,149}, {0,31,115}, {89,67,88}, {140,49,35}, {76,71,0}, {70,140,117}, {0,17,64}, {242,0,194}, {102,36,26}, {217,206,54}, {45,89,74}, {57,103,230}, {204,0,163}, {64,22,16}, {166,157,41}, {32,64,53}, {41,75,166}, {140,0,112}, {229,130,115}, {127,121,32}, {26,51,43}, {35,63,140}, {115,0,92}, {191,108,96}, {64,61,16}, {191,255,234}, {121,153,242}, {89,0,71}, {153,87,77}, {51,48,13}, {163,217,199}, {89,113,179}, {51,0,41}, {127,72,64}, {255,247,128}, {124,166,152}, {64,81,128}, {166,41,141}, {89,51,45}, {204,197,102}, {86,115,105}, {51,65,102}, {64,16,54}, {255,200,191}, {166,160,83}, {38,51,47}, {26,32,51}, {230,115,207}, {217,170,163}, {140,136,70}, {0,255,204}, {182,198,242}, {166,83,149}, {153,120,115}, {76,74,38}, {0,204,163}, {153,167,204}, {242,182,230}, {128,100,96}, {51,49,26}, {0,89,71}, {67,73,89}, {204,153,194}, {64,50,48}, {179,176,134}, {0,64,51}, {0,34,255}, {230,0,153}, {229,61,0}, {115,113,86}, {0,51,41}, {0,27,204}, {191,0,128}, {191,51,0}, {167,179,0}, {61,242,206}, {0,22,166}, {128,0,85}, {140,37,0}, {131,140,0}, {48,191,163}, {0,19,140}, {102,0,68}, {102,27,0}, {95,102,0}, {38,153,130}, {0,15,115}, {64,0,43}, {76,20,0}, {242,255,64}, {29,115,98}, {0,10,77}, {242,61,182}, {64,17,0}, {206,217,54}, {128,255,229}, {64,89,255}, {204,51,153}, {51,14,0}, {157,166,41}, {108,217,195}, {48,67,191}, {153,38,115}, {255,115,64}, {73,77,19}, {89,179,161}, {38,54,153}, {77,19,57}, {217,98,54}, {222,230,115}, {57,115,103}, {32,45,128}, {51,13,38}, {166,75,41}, {173,179,89}, {38,77,69}, {26,36,102}, {217,108,181}, {140,63,35}, {111,115,57}, {48,64,61}, {19,27,77}, {140,70,117}, {115,52,29}, {86,89,45}, {0,242,226}, {121,137,242}, {102,51,85}, {89,40,22}, {62,64,32}, {0,102,95}, {96,108,191}, {77,38,64}, {64,29,16}, {163,204,0}, {0,64,60}, {70,79,140}, {166,124,152}, {51,23,13}, {143,179,0}, {48,191,182}, {57,65,115}, {77,57,70}, {242,153,121}, {71,89,0}, {38,153,145}, {38,43,77}, {51,38,47}, {178,113,89}, {41,51,0}, {32,128,121}, {191,200,255}, {255,0,136}, {140,89,70}, {217,255,64}, {22,89,85}, {163,170,217}, {204,0,109}, {115,73,57}, {54,64,16}, {13,51,48}, {134,140,179}, {153,0,82}, {89,57,45}, {229,255,128}, {121,242,234}, {105,110,140}, {115,0,61}, {64,40,32}, {138,153,77}, {102,204,197}, {86,90,115}, {89,0,48}, {51,32,26}, {230,242,182}, {32,64,62}, {57,60,77}, {51,0,27}, {242,198,182}, {182,191,143}, {172,230,226}, {38,40,51}, {230,57,149}, {204,167,153}, {133,140,105}, {134,179,176}, {0,0,230}, {191,48,124}, {166,135,124}, {61,64,48}, {96,128,125}, {0,0,179}, {140,35,91}, {128,104,96}, {170,255,0}, {67,89,88}, {0,0,51}, {115,29,75}, {89,73,67}, {127,191,0}, {0,238,255}, {54,54,217}, {64,16,41}, {229,92,0}, {110,166,0}, {0,155,166}, {45,45,179}, {242,121,186}, {191,77,0}, {68,102,0}, {0,131,140}, {38,38,153}, {204,102,156}, {153,61,0}, {172,230,57}, {0,95,102}, {19,19,77}, {128,64,98}, {127,51,0}, {115,153,38}, {0,48,51}, {13,13,51}, {64,32,49}, {102,41,0}, {96,128,32}, {54,206,217}, {115,115,230}, {51,26,39}, {76,31,0}, {57,77,19}, {19,73,77}, {96,96,191}, {255,191,225}, {64,26,0}, {159,191,96}, {121,234,242}, {17,0,128}, {217,163,191}, {51,20,0}, {106,128,64}, {89,173,179}, {14,0,102}, {140,105,124}, {242,133,61}, {105,115,86}, {64,123,128}, {45,32,128}, {102,77,90}, {204,112,51}, {82,89,67}, {51,99,102}, {145,128,255}, {229,0,92}, {166,91,41}, {27,51,0}, {26,49,51}, {94,83,166}, {166,0,66}, {140,77,35}, {157,242,61}, {191,251,255}, {79,70,140}, {140,0,56}, {115,63,29}, {186,242,121}, {153,201,204}, {65,57,115}, {115,0,46}, {76,42,19}, {117,153,77}, {124,163,166}, {51,45,89}, {89,0,36}, {51,28,13}, {78,102,51}, {57,75,77}, {36,32,64}, {64,0,26}, {255,179,128}, {59,77,38}, {38,50,51}, {29,26,51}, {229,57,126}, {217,152,108}, {39,51,26}, {0,184,230}, {160,153,204}, {191,48,105}, {178,125,89}, {203,230,172}, {0,153,191}, {70,67,89}, {127,32,70}, {153,107,77}, {158,179,134}, {0,92,115}, {50,48,64}, {89,22,49}, {127,89,64}, {135,153,115}, {0,71,89}, {20,0,77}, {51,13,28}, {89,62,45}, {97,242,0}, {0,51,64}, {86,48,191}, {255,128,179}, {64,45,32}, {82,204,0}, {57,195,230}, {121,96,191}, {204,102,143}, {51,36,26}, {71,179,0}, {41,141,166}, {187,172,230}, {166,83,116}, {242,206,182}, {56,140,0}, {35,119,140}, {125,115,153}, {115,57,80}, {191,163,143}, {41,102,0}, {13,43,51}, {92,0,230}, {77,38,54}, {153,130,115}, {112,204,51}, {128,230,255}, {77,0,191}, {166,124,141}, {128,108,96}, {70,128,32}, {108,195,217}, {56,0,140}, {64,48,54}, {102,87,77}, {49,89,22}, {83,149,166}, {126,57,230}, {242,0,65}, {77,65,57}, {35,64,16}, {57,103,115}, {84,38,153}, {204,0,54}, {51,43,38}, {45,64,32}, {45,80,89}, {70,32,128}, {166,0,44}, {242,129,0}, {75,166,41}, {32,57,64}, {49,22,89}, {115,0,31}, {204,109,0}, {145,230,115}, {182,230,242}, {35,16,64}, {89,0,24}, {166,88,0}, {121,191,96}, {153,194,204}, {152,108,217}, {255,64,115}, {140,75,0}, {73,115,57}, {105,133,140}, {107,77,153}, {191,48,86}, {102,54,0}, {208,255,191}, {77,97,102}, {217,191,255}, {153,38,69}, {76,41,0}, {104,128,96}, {48,61,64}, {152,134,179}, {127,32,57}, {64,34,0}, {42,51,38}, {0,170,255}, {98,86,115}, {102,26,46}, {51,27,0}, {10,77,0}, {0,136,204}, {136,0,255}, {76,19,34}, {242,157,61}, {8,64,0}, {0,102,153}, {109,0,204}, {255,128,162}, {178,116,45}, {80,230,57}, {0,85,128}, {88,0,166}, {217,108,137}, {140,91,35}, {87,153,77}, {0,68,102}, {54,0,102}, {179,89,113}, {115,75,29}, {43,77,38}, {0,51,77}, {34,0,64}, {140,70,89}, {89,58,22}, {0,89,0}, {64,191,255}, {27,0,51}, {89,45,57}, {64,41,16}, {0,51,0}, {54,163,217}, {166,64,255}, {64,32,40}, {229,176,115}, {64,255,64}, {45,134,179}, {124,48,191}, {51,26,32}, {191,147,96}, {48,191,48}, {35,105,140}, {66,26,102}, {242,182,198}, {153,117,77}, {121,242,121}, {29,86,115}, {186,121,242}, {191,143,156}, {127,98,64}, {102,204,102}, {22,67,89}, {137,89,179}, {102,77,83}, {89,68,45}, {45,89,45}, {16,48,64}, {49,32,64}, {229,0,31}, {64,49,32}, {26,51,26}, {128,213,255}, {39,26,51}, {191,0,26}, {51,39,26}, {172,230,172}, {96,159,191}, {180,153,204}, {140,0,19}, {242,214,182}, {143,191,143}, {70,117,140}, {153,0,230}, {115,0,15}, {204,180,153}, {124,166,124}, {57,96,115}, {119,0,179}, {89,0,12}, {166,146,124}, {67,89,67}, {45,74,89}, {94,0,140}, {76,0,10}, {89,79,67}, {48,64,48}, {32,53,64}, {77,0,115}, {64,0,9}, {64,56,48}, {0,153,20}, {191,234,255}, {172,57,230}, {51,0,7}, {255,170,0}, {16,64,22}, {163,199,217}, {124,41,166}, {229,57,80}, {204,136,0}, {13,51,18}, {124,152,166}, {96,32,128}, {191,48,67}, {166,111,0}, {64,128,72}, {96,117,128}, {128,77,153}, {140,35,49}, {140,94,0}, {32,64,36}, {67,82,89}, {106,64,128}, {102,26,36}, {115,77,0}, {86,115,90}, {0,95,179}, {85,51,102}, {76,19,27}, {89,60,0}, {0,140,37}, {0,54,102}, {64,38,77}, {242,121,137}, {64,43,0}, {0,115,31}, {0,41,77}, {210,172,230}, {191,96,108}, {229,172,57}, {45,179,80}, {0,27,51}, {140,115,153}, {153,77,87}, {191,143,48}, {26,102,46}, {61,157,242}, {70,57,77}, {127,64,72}, {153,115,38}, {127,255,161}, {48,124,191}, {47,38,51}, {102,51,58}, {115,86,29}, {102,204,129}, {29,75,115}, {194,0,242}, {76,38,43}, {76,57,19}, {77,153,97}, {22,58,89}, {153,0,191}, {217,163,170}, {51,38,13}, {51,102,65}, {13,33,51}, {61,0,77}, {166,124,130}, {255,213,128}, {182,242,198}, {128,196,255}, {206,61,242}, {140,105,110}, {217,181,108}, {115,153,125}, {96,147,191}, {173,51,204}, {77,57,60}, {178,149,89}, {0,255,102}, {70,108,140}, {87,26,102}, {127,106,64}, {0,217,87}, {57,88,115}, {65,19,77}};
            ColorMap cmap(n);
            for(size_t i = 0; i < n; ++i)
                cmap[i] = colors[i];
            return cmap;
        }

        RGBImage colorize(LabelImage const& labelImg, ColorMap const& colorMap)
        {
            RGBImage rgb(labelImg.width(), labelImg.height());

            for (size_t i = 0; i < labelImg.pixels(); ++i)
            {
                Label l = labelImg.atSite(i);
                assert(colorMap.size() > l);

                rgb.atSite(i, 0) = colorMap[l][0];
                rgb.atSite(i, 1) = colorMap[l][1];
                rgb.atSite(i, 2) = colorMap[l][2];
            }

            return rgb;
        }

        LabelImage decolorize(RGBImage const& rgb, ColorMap const& colorMap)
        {
            // Generate lookup-table by colors
            using Color = std::array<unsigned char, 3>;
            boost::unordered_map<Color, size_t> lookup;
            for (size_t i = 0; i < colorMap.size(); ++i)
                lookup[colorMap[i]] = i;

            // Compute label image
            LabelImage labels(rgb.width(), rgb.height());
            for (Site s = 0; s < labels.pixels(); ++s)
            {
                Color c = {rgb.atSite(s, 0), rgb.atSite(s, 1), rgb.atSite(s, 2)};
                assert(lookup.count(c) > 0);
                Label l = lookup[c];
                labels.atSite(s) = l;
            }

            return labels;
        }
    }
}